from main import dp
from aiogram import types
from utilities import *
from aiogram.dispatcher import FSMContext


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'choice_category')
async def create_appeal(callback: types.CallbackQuery, state: FSMContext):
    user = User.get_or_none(User.user_id == callback.from_user.id)
    if user.user_role == 'cashier':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è',
                                      reply_markup=cancel_inline())
        await state.set_state(Cashier.enter_text_category)
    elif user.user_role == 'admin':
        category = Category.get_by_id(int(callback.data.split()[1]))
        text = f'''{category.name}
–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ üßæ–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
–ß—Ç–æ–±—ã üóëÔ∏è —É–¥–∞–ª–∏—Ç—å üßæ–∫–∞—Ç–µ–≥–æ—Ä–∏—é - "–£–¥–∞–ª–∏—Ç—å"
‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'''
        await callback.message.answer(text, reply_markup=category_edit())
    await state.update_data(dict(category=callback.data.split()[1]))
