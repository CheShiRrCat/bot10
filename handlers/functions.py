import datetime

from main import bot
from aiogram.dispatcher import FSMContext
from utilities import *


# async def delete_messages(state: FSMContext, message: types.Message = None):
#     data = await state.get_data()
#     if data:
#         for msg in data['messages']:
#             #print(f'state {msg}')
#             if type(msg) == list:
#                 for row in msg:
#                     await row.delete()
#             else:
#                 await msg.delete()
#     if type(message) == types.Message:
#         #print(f'func {message}')
#         await message.delete()
#     elif type(message) == list:
#         for i in message:
#             await i.delete()
#     await state.update_data(dict(messages=[]))


async def to_main(message: types.Message, state: FSMContext, _user: types.User, _text=''):
    await state.reset_state(with_data=True)
    user = User.get_or_none(User.user_id == _user.id)
    if user is None:
        user = User.create(user_id=message.from_user.id, user_role='cashier', username=_user.username)
    if not user.username and _user.username:
        user.username = _user.username
        user.save()
    if user.user_role == 'cashier':
        text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–ò–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –í—ã –º–æ–∂–µ—Ç–µ: –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–∞–º –æ –ø–æ–ª–æ–º–∫–∞—Ö –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö (—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ 
–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ), –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª–∏–∞–ª–∞'''
        await message.answer(_text + '\n' + text, reply_markup=cashier_keyboard())
    elif user.user_role == 'responsible_break':
        text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"'''
        await message.answer(_text + '\n' + text, reply_markup=break_responsible_keyboard())
    elif user.user_role == 'responsible_appeal':
        text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"'''
        await message.answer(_text + '\n' + text, reply_markup=appeal_responsible_keyboard())
    elif user.user_role == 'responsible':
        text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
        –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"'''
        await message.answer(_text + '\n' + text, reply_markup=adm_resp_keyboard())
#     elif user.user_role == 'clerk':
#         text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
# –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–¥–∞—á–∏"'''
#         await message.answer(_text + '\n' + text, reply_markup=clerk_keyboard())
#     elif user.user_role == 'resp_clerk':
#         text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
# –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å üéØ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–µ–∫-–ª–∏—Å—Ç—ã"'''
#         await message.answer(_text + '\n' + text, reply_markup=resp_clerk_kb())
    elif user.user_role == 'admin':
        text = '''<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é</b>
–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üè¨ —Ñ–∏–ª–∏–∞–ª—ã, üßæ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–∑–Ω–∞—á–∏—Ç—å üîë —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å üìë —á–µ–∫-–ª–∏—Å—Ç—ã'''
        await message.answer(_text + '\n' + text, reply_markup=admin_keyboard())
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞! –£ –í–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å')


def get_status(status):
    if status == 0:
        return '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
    elif status == 1:
        return 'üîß –í —Ä–∞–±–æ—Ç–µ'
    elif status == 2:
        return '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞'
    else:
        return '‚ùå –û—à–∏–±–∫–∞'


def get_role_name(role):
    if role == 'cashier':
        return '–õ–∏–Ω–µ–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª'
    elif role == 'responsible_appeal':
        return '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è'
    elif role == 'responsible_break':
        return '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–æ–ª–æ–º–∫–∏'
    elif role == 'responsible':
        return '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'
    elif role == 'admin':
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'


async def notify_users(user_role, text):
    users = User.select().where(User.user_role == user_role)
    for i in users:
        await bot.send_message(i.user_id, text)


async def null_tasks():
    tasks = Task.select()
    for i in tasks:
        i.date = None
        i.status = 1
        i.save()
    today = datetime.date.today()
    tasks = BranchesTasks.select()
    for task in tasks:
        print((datetime.datetime.strptime(task.date, '%Y-%m-%d').date() - today).days)
        if (datetime.datetime.strptime(task.date, '%Y-%m-%d').date() - today).days < -2:
            task.delete_instance()
    checklists = ChecklistTemplates.select()
    for point in checklists:
        BranchesTasks.create(checklist_id=point.id, date=today,
                             branch_id=point.branch_id, is_close=point.is_close)
