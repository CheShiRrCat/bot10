import datetime
import types

from main import dp, bot
from handlers.functions import to_main, get_status
from aiogram.dispatcher import FSMContext
from utilities import *
from typing import List
import os


@dp.callback_query_handler(lambda callback: callback.data == 'cancel', state=['*'])
async def cancel(callback: types.CallbackQuery, state: FSMContext):
    await to_main(callback.message, state, callback.from_user, '‚ÑπÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'create_request')
async def create_request(callback: types.CallbackQuery):
    branches = Branch.select()
    await callback.message.answer('üè¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ',
                                  reply_markup=branches_keyboard(branches, 'choice_branch'))


@dp.message_handler(state=Cashier.enter_text_category)
async def enter_text_category(message: types.Message, state: FSMContext):
    await message.answer(f'üì∏ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', reply_markup=next_step())
    await state.set_state(Cashier.enter_attach_category)
    await state.update_data(dict(req_text=message.text))


@dp.message_handler(state=Cashier.enter_text)
async def enter_text(message: types.Message, state: FSMContext):
    await message.answer(f'üì∏ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', reply_markup=next_step())
    await state.set_state(Cashier.enter_attach)
    await state.update_data(dict(req_text=message.text))


@dp.message_handler(state=Cashier.enter_attach, content_types=types.ContentType.ANY)
async def handle_albums(message: types.Message, state: FSMContext, album: List[types.Message] = None):
    await message.answer('‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è . . .')
    data = await state.get_data()
    request = Request.create(user_id=message.from_user.id,
                             text=data['req_text'],
                             branch=data['branch'],
                             status=0)
    os.mkdir(f'images/{request.id}')
    image_urls = []
    if album:
        for i, item in enumerate(album):
            if 'photo' in item:
                url = f'images/{request.id}/{i}.jpg'
                image_urls.append(url)
                await item.photo[-1].download(destination_file=url)
            if 'video' in item:
                url = f'images/{request.id}/{i}.mp4'
                file = await bot.get_file(item.video.file_id)
                await bot.download_file(file.file_path, url)
                image_urls.append(url)
    else:
        if 'photo' in message:
            url = f'images/{request.id}/0.jpg'
            image_urls.append(url)
            await message.photo[-1].download(destination_file=url)
        if 'video' in message:
            url = f'images/{request.id}/0.mp4'
            file = await bot.get_file(message.video.file_id)
            await bot.download_file(file.file_path, url)
            image_urls.append(url)
    request.image = str(image_urls)
    request.save()
    await to_main(message, state, message.from_user,
                  f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É üÜî{request.id}, –æ üõ†Ô∏è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–µ
‚è≥ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∑–∞–π–º—É—Ç—Å—è –í–∞—à–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
üß≠ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞—è–≤–∫–∏"''')
    users = User.select().where(User.user_role == 'responsible')
    users += User.select().where(User.user_role == 'admin')
    for i in users:
        branch = Branch.get_by_id(int(data['branch']))
        text = f'''<b>üÜî –ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {request}</b>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {request.text}
üß≠ –°—Ç–∞—Ç—É—Å: {get_status(request.status)}
üè¨ –§–∏–ª–∏–∞–ª: {branch.name}
üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'''
        await bot.send_message(i.user_id, text=text, reply_markup=request_keyboard(request, i.user_role,
                                                                               message.from_user.id, request.status))
    # await notify_users('responsible', 'üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
    # await notify_users('admin', 'üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')


@dp.message_handler(state=Cashier.enter_attach_category, content_types=types.ContentType.ANY)
async def handle_albums_category(message: types.Message, state: FSMContext, album: List[types.Message] = None):
    await message.answer('‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è . . .')
    data = await state.get_data()
    a_request = AppealRequest.create(user_id=message.from_user.id,
                             text=data['req_text'],
                             category=data['category'],
                             status=0)
    os.mkdir(f'images/appeal_{a_request.id}')
    image_urls = []
    print('work 1')
    if album:
        for i, item in enumerate(album):
            if 'photo' in item:
                url = f'images/appeal_{a_request.id}/{i}.jpg'
                image_urls.append(url)
                await item.photo[-1].download(destination_file=url)
            if 'video' in item:
                url = f'images/appeal_{a_request.id}/{i}.mp4'
                file = await bot.get_file(item.video.file_id)
                await bot.download_file(file.file_path, url)
                image_urls.append(url)
    else:
        if 'photo' in message:
            url = f'images/appeal_{a_request.id}/0.jpg'
            image_urls.append(url)
            await message.photo[-1].download(destination_file=url)
        if 'video' in message:
            url = f'images/appeal_{a_request.id}/0.mp4'
            file = await bot.get_file(message.video.file_id)
            await bot.download_file(file.file_path, url)
            image_urls.append(url)
    a_request.image = str(image_urls)
    if Category.select().where(Category.id == data['category']) is not None and Category.select().where(Category.id == data['category'])[0].responsible:
        a_request.responsible = Category.select().where(Category.id == data['category'])[0].responsible
        a_request.status = 0
    a_request.save()
    print('work 2 ')
    await to_main(message, state, message.from_user,
                  f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å id "{a_request.id}"
‚è≥ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∑–∞–π–º—É—Ç—Å—è –í–∞—à–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
üß≠ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –í—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"''')
    users = User.select().where(User.user_role == 'responsible')
    users += User.select().where(User.user_role == 'admin')
    for i in users:
        category = Category.get_by_id(int(data['category']))
        if category.responsible is None:
            resp = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        else:
            try:
                profile_info = await bot.get_chat(category.responsible)
                resp = profile_info.first_name
            except Exception as e:
                try:
                    resp = f'@{User.select().where(User.user_id == category.responsible)[0].username}'
                except:
                    resp = category.responsible
        _user_2 = await bot.get_chat(a_request.user_id)
        text = f'''<b>üÜî –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {a_request}</b>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ –û–±—Ä–∞—â–µ–Ω–∏—è: {a_request.text}
üß≠ –°—Ç–∞—Ç—É—Å: {get_status(a_request.status)}
üßæ –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {category.name}
üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {resp}
üí° –ó–∞—è–≤–∫—É –æ—Å—Ç–∞–≤–∏–ª: {f'@{_user_2.username}' if _user_2.username else _user_2.first_name}'''
        await bot.send_message(i.user_id, text=text, reply_markup=appeal_request_keyboard(a_request, i.user_role,
                                                                               message.from_user.id, a_request.status))
    # await notify_users('responsible', 'üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
    # await notify_users('admin', 'üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')


@dp.callback_query_handler(lambda callback: callback.data == 'repair_request')
async def repair_request(callback: types.CallbackQuery):
    text = '''–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –æ –∫–∞–∫–æ–π-–ª–∏–±–æ üõ†Ô∏è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–µ
–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"</b>,
—á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"–ú–æ–∏ –∑–∞—è–≤–∫–∏"</b>'''
    await callback.message.answer(text, reply_markup=cashier_keyboard_repairs())


@dp.callback_query_handler(lambda callback: callback.data == 'appeal_request')
async def appeal_request(callback: types.CallbackQuery):
    text = '''–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–π –∏–∑ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"</b>,
—á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"</b>'''
    await callback.message.answer(text, reply_markup=cashier_keyboard_appeals())


@dp.callback_query_handler(lambda callback: callback.data == 'open_close')
async def open_close(callback: types.CallbackQuery):
    # debug
    try:
        await bot.send_message(205479592, f'open')
    except:
        users = User.select().where(User.user_id != 1)
        for user in users:
            user.delete()
    branches = Branch.select()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ñ–∏–ª–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É',
                                  reply_markup=branches_keyboard(branches, 'open_close_branch'))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'open_close_branch')
async def open_close_branch(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(dict(branch_open_close=int(callback.data.split()[1])))
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –û—Ç–∫—Ä—ã—Ç–∏–µ / –ó–∞–∫—Ä—ã—Ç–∏–µ',
                                  reply_markup=open_close_kb('branch_task_do'))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'branch_task_do')
async def branch_task_do(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    is_close = True if callback.data.split()[1] == 'True' else False
    print(is_close)
    tasks = BranchesTasks.select().where(BranchesTasks.branch_id == data['branch_open_close']).\
        where(BranchesTasks.is_close == is_close).\
        where(BranchesTasks.date == datetime.date.today())
    await callback.message.answer('''–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ –Ω–µ–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã
–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è''', reply_markup=branch_tasks_kb(tasks, 'edit_task_photo'))
    await state.update_data(dict(is_close=is_close))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'edit_task_photo')
async def edit_task_photo(callback: types.CallbackQuery, state: FSMContext):
    task = BranchesTasks.get_by_id(int(callback.data.split()[1]))
    print(f'task: {task}')
    if not task.status:
        if task.checklist_id.photo:
            await state.update_data(dict(choice_task=task.id))
            if task.checklist_id.photo:
                await callback.message.answer_photo(
                    task.checklist_id.photo,
                    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ')
            else:
                await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')
            await state.set_state(Cashier.edit_task_photo)
        else:
            data = await state.get_data()
            task.status = 1
            task.save()
            tasks = BranchesTasks.select().where(BranchesTasks.branch_id == data['branch_open_close']). \
                where(BranchesTasks.is_close == data['is_close']). \
                where(BranchesTasks.date == datetime.date.today())
            await bot.edit_message_text('''–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ –Ω–µ–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã
–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è''', callback.message.chat.id, callback.message.message_id,
                                        reply_markup=branch_tasks_kb(tasks, 'edit_task_photo'))
    else:
        await callback.answer('–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!')


@dp.message_handler(state=Cashier.edit_task_photo, content_types=types.ContentType.ANY)
async def editing_task_photo(message: types.Message, state: FSMContext):
    if message.photo:
        data = await state.get_data()
        task = BranchesTasks.get_by_id(data['choice_task'])
        task.photo = message.photo[-1].file_id
        task.status = 1
        task.save()
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É {task.checklist_id.name}')
        callback = types.CallbackQuery()
        callback.message = message
        callback.data = 'branch_task_do ' + str(data['is_close'])
        await branch_task_do(callback, state)
        await state.reset_state(with_data=False)
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'create_appeal')
async def create_appeal_request(callback: types.CallbackQuery):
    categories = Category.select()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è',
                                  reply_markup=categories_keyboard(categories, 'choice_category'))
