from main import bot, dp
from main import bot, dp
from aiogram.dispatcher import FSMContext
from handlers.functions import to_main, get_status
from utilities import *
from os import listdir


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'show_appeals')
async def my_appeals_requests(callback: types.CallbackQuery):
    # debug
    await bot.send_message(205479592, f'Show all appeals')
    user = User.get_or_none(User.user_id == callback.from_user.id)
    if user:
        requests = []
        if user.user_role == 'responsible_appeal' or user.user_role == 'admin':
            requests = AppealRequest.select().where(AppealRequest.status == int(callback.data.split()[1]))
        elif user.user_role == 'cashier':
            requests = AppealRequest.select().where(AppealRequest.user_id == callback.from_user.id)
        else:
            await callback.answer('‚ùå –û—à–∏–±–∫–∞!')
        if requests:
            for i in requests:

                if user.user_role != 'admin' and i.responsible and i.responsible != user.user_id:
                    continue

                category = Category.get_by_id(int(i.category))
                _user = await bot.get_chat_member(i.responsible, i.responsible) if i.responsible else None
                _user_2 = await bot.get_chat(i.user_id)
                text = f'''<b>üÜî –ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {i}</b>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {i.text}
üß≠ –°—Ç–∞—Ç—É—Å: {get_status(i.status)}
üßæ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}
üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {_user['user']['first_name'] if _user else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
üí° –ó–∞—è–≤–∫—É –æ—Å—Ç–∞–≤–∏–ª: {f'@{_user_2.username}' if _user_2.username else _user_2.first_name}'''
                await callback.message.answer(text=text, reply_markup=appeal_request_keyboard(i, user.user_role,
                                                                                       i.user_id, i.status))
            await callback.message.answer('‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã',
                                          reply_markup=cancel_inline())
        else:
            await callback.answer('‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—É—Å—Ç', show_alert=True)


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'show_media_appeal_request')
async def show_media_appeal_request(callback: types.CallbackQuery, state: FSMContext):
    # debug
    await bot.send_message(205479592, f'Show media appeal')

    i = AppealRequest.get_by_id(int(callback.data.split()[1]))
    user = User.get_or_none(User.user_id == callback.from_user.id)
    category = Category.get_by_id(int(i.category))
    if user and i:
        file_list = listdir(f'images/appeal_{i}')
        if file_list:
            _user = await bot.get_chat_member(i.responsible, i.responsible) if i.responsible else None
            await callback.message.answer('‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è . . .')
            text = f'''<b>üÜî –ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {i}</b>
üìÉ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {i.text}
üß≠ –°—Ç–∞—Ç—É—Å: {get_status(i.status)}
üßæ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}
üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {_user['user']['first_name'] if _user else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}'''
            media = types.MediaGroup()
            for file in file_list:
                if '.mp4' in file:
                    media.attach_video(types.InputFile(f'images/appeal_{i}/{file}'), caption=text if file[0] == '0' else '')
                else:
                    media.attach_photo(types.InputFile(f'images/appeal_{i}/{file}'), caption=text if file[0] == '0' else '')
            await bot.send_media_group(callback.from_user.id, media=media)
            callback_btn = 'show_appeals' if user.user_role == 'cashier' else f'show_appeals {i.status}'
            await callback.message.answer('‚Ü©Ô∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                          reply_markup=back_inline(callback_btn))
        else:
            await callback.message.answer(f'‚ÑπÔ∏è –£ –∑–∞—è–≤–∫–∏ ‚Ññ{i.id} –Ω–µ—Ç—É –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤', reply_markup=cancel_inline())
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞', show_alert=True)


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'delete_appeal')
async def delete_appeal_request(callback: types.CallbackQuery, state: FSMContext):
    appeal = AppealRequest.get_by_id(int(callback.data.split()[1]))
    if appeal:
        await to_main(callback.message, state, callback.from_user, _text=f'üóëÔ∏è –í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞—è–≤–∫—É ‚Ññ{appeal.id}')
        appeal.delete_instance()
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞! –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'req_appeal_change_status')
async def request_appeal_change_status(callback: types.CallbackQuery, state: FSMContext):
    appeal = AppealRequest.get_by_id(int(callback.data.split()[1]))
    if appeal:
        if int(callback.data.split()[2]) != 2:
            await callback.message.answer('‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —ç—Ç—É –∑–∞—è–≤–∫—É',
                                          reply_markup=edit_checklists_kb(
                                              User.select().where(User.user_role == 'responsible_appeal'),
                                              'set_appeal_resp_for_req'))
            await state.update_data(dict(request=appeal, status=int(callback.data.split()[2])))
        else:
            appeal.status = 2
            appeal.save()
            await bot.send_message(appeal.user_id, f'‚ÑπÔ∏è –í–∞—à–µ–π –∑–∞—è–≤–∫–µ —Å ‚Ññ{appeal.id} –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ '
                                                    f'{get_status(appeal.status)}')
            await bot.send_message(appeal.responsible, f'‚ÑπÔ∏è –í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–µ ‚Ññ{appeal.id}'
                                                    f' –Ω–∞ {get_status(appeal.status)}\n')
            user = User.get_or_none(User.user_id == appeal.responsible)
            if user.user_role == 'responsible_appeal':
                text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
            –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"'''
                await bot.send_message(user.user_id, text + '\n' + text, reply_markup=responsible_keyboard())
            elif user.user_role == 'clerk':
                text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
            –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–¥–∞—á–∏"'''
                await bot.send_message(user.user_id, text + '\n' + text, reply_markup=clerk_keyboard())
            elif user.user_role == 'resp_clerk':
                text = '''<b>üìë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
            –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å üéØ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–µ–∫-–ª–∏—Å—Ç—ã"'''
                await bot.send_message(user.user_id, text + '\n' + text, reply_markup=resp_clerk_kb())
            elif user.user_role == 'admin':
                text = '''<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é</b>
            –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üè¨ —Ñ–∏–ª–∏–∞–ª—ã, üßæ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,  –Ω–∞–∑–Ω–∞—á–∏—Ç—å üîë —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å üìë —á–µ–∫-–ª–∏—Å—Ç—ã'''
                await bot.send_message(user.user_id, text + '\n' + text, reply_markup=admin_keyboard())
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞! –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'set_appeal_resp_for_req')
async def set_appeal_responsible_for_request(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    appeal = data['request']
    appeal.status = data['status']
    appeal.responsible = int(callback.data.split()[1])
    appeal.save()
    user = await bot.get_chat_member(int(callback.data.split()[1]), int(callback.data.split()[1]))
    await bot.send_message(appeal.user_id, f'‚ÑπÔ∏è –í–∞—à–µ–π –∑–∞—è–≤–∫–µ —Å ‚Ññ{appeal.id} –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ '
                                            f'{get_status(appeal.status)}, –µ–π –∑–∞–π–º–µ—Ç—Å—è {user["user"]["first_name"]}')
    await to_main(callback.message, state, callback.from_user,
                  _text=f'‚ÑπÔ∏è –í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–µ ‚Ññ{appeal.id} –∏ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ {user["user"]["first_name"]}'
                        f' –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∞ {get_status(appeal.status)}\n')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'show_types_appeals_requests')
async def show_types_appeals_requests(callback: types.CallbackQuery):
    text = '''<b>üßæ –û–±—Ä–∞—â–µ–Ω–∏—è</b>
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: 
–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ <b>"‚åõ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"</b>
–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ <b>"üîß –í —Ä–∞–±–æ—Ç–µ"</b>
–ò—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ <b>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</b>'''
    await callback.message.answer(text, reply_markup=responsible_appeal_requests_keyboard())


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'show_checklists')
async def show_checklists(callback: types.CallbackQuery):
    branches = Branch.select()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã',
                                  reply_markup=branches_keyboard(branches, 'resp_choice_branch'))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'resp_choice_branch')
async def resp_choice_branch(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(dict(resp_choice_branch=int(callback.data.split()[1])))
    tasks = BranchesTasks.select()
    dates = []
    for task in tasks:
        if task.date not in dates:
            dates.append(task.date)
    print(dates)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫-–ª–∏—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤',
                                  reply_markup=resp_checklists_kb(dates, 'resp_choice_date'))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'resp_choice_date')
async def resp_choice_date(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(dict(resp_choice_date=callback.data.split()[1]))
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –û—Ç–∫—Ä—ã—Ç–∏–µ / –ó–∞–∫—Ä—ã—Ç–∏–µ',
                                  reply_markup=open_close_kb('resp_choice_do'))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'resp_choice_do')
async def resp_choice_do(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    is_close = True if callback.data.split()[1] == 'True' else False
    tasks = BranchesTasks.select().where(BranchesTasks.branch_id == data['resp_choice_branch']). \
        where(BranchesTasks.is_close == is_close). \
        where(BranchesTasks.date == data['resp_choice_date'])
    for task in tasks:
        text = f'''üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {task.checklist_id.name}
–°—Ç–∞—Ç—É—Å: {"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task.status else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}'''
        if task.photo:
            await callback.message.answer_photo(task.photo, text)
        else:
            await callback.message.answer(text)
