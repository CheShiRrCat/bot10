from aiogram.dispatcher import FSMContext

from handlers.functions import to_main, get_role_name, get_status
from main import bot, dp
from utilities import *


@dp.callback_query_handler(lambda callback: callback.data == 'adm_requests')
async def adm_requests(callback: types.CallbackQuery):
    text = '''
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ, –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö <b>"–ü–æ–ª–æ–º–∫–∏"</b> –∏ <b>"–û–±—Ä–∞—â–µ–Ω–∏—è"</b>'''
    await callback.message.answer(text, reply_markup=adm_resp_keyboard())


@dp.callback_query_handler(lambda callback: callback.data == 'edit_branches')
async def edit_branches(callback: types.CallbackQuery):
    user = User.get_or_none(User.user_id == callback.from_user.id)
    if user and user.user_role == 'admin':
        branches = Branch.select()
        text = f'''–í—ã–±–µ—Ä–∏—Ç–µ üè¨ —Ñ–∏–ª–∏–∞–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
–ß—Ç–æ–±—ã ‚ûï –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª, –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"'''
        await callback.message.answer(text, reply_markup=branches_keyboard(branches, 'choice_branch', user.user_role))
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞!', show_alert=True)


@dp.callback_query_handler(lambda callback: callback.data == 'edit_branch')
async def edit_branches(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'branch' in data:
        text = f'''üè¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞'''
    else:
        text = f'''üè¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞'''
    await state.set_state(Admin.edit_branch)
    await callback.message.answer(text)


@dp.message_handler(state=Admin.edit_branch)
async def add_branch(message: types.Message, state: FSMContext):
    data, text = await state.get_data(), ''
    if 'branch' in data:
        branch = Branch.get_by_id(int(data['branch']))
        branch.name = message.text
        branch.save()
        text = f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –Ω–∞: {message.text}'
    else:
        Branch.create(name=message.text)
        text = f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª: {message.text}'
    await to_main(message, state, message.from_user, text)


@dp.callback_query_handler(lambda callback: callback.data == 'delete_branch')
async def edit_branch(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'branch' in data:
        branch = Branch.get_by_id(int(data['branch']))
        text = f'üóëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ñ–∏–ª–∏–∞–ª {branch.name}'
        branch.delete_instance()
        await to_main(callback.message, state, callback.from_user, text)
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª', show_alert=True)


@dp.callback_query_handler(lambda callback: callback.data == 'edit_roles')
async def edit_roles(callback: types.CallbackQuery, state: FSMContext):
    user = User.get_or_none(User.user_id == callback.from_user.id)
    if user and user.user_role == 'admin':
        await state.set_state(Admin.edit_user)
        await callback.message.answer('üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–∞–≤–∞'
                                      '\n‚ÑπÔ∏è –°–∏–º–≤–æ–ª @ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
                                      reply_markup=cancel_inline())


@dp.message_handler(state=Admin.edit_user)
async def find_user(message: types.Message, state: FSMContext):
    user = User.get_or_none(User.username == message.text)
    if user:
        await message.answer(f'üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}\n'
                             f'üîë –°–µ–π—á–∞—Å –µ–≥–æ —Ä–æ–ª—å - {get_role_name(user.user_role)}',
                             reply_markup=edit_roles_kb())
        await state.update_data(dict(user_to_edit=user))
    else:
        await message.answer('''‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω
‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏—á–∏–Ω—ã:
1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (/start)
2Ô∏è‚É£ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω
3Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –ª–æ–≥–∏–Ω
4Ô∏è‚É£ –õ–æ–≥–∏–Ω –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ''')


@dp.callback_query_handler(state=Admin.edit_user)
async def edit_roles(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = User.get_by_id(data['user_to_edit'])
    if user and callback.data.split()[0] in ['cashier', 'responsible_break', 'responsible_appeal', 'responsible',
                                             'admin']:
        user.user_role = callback.data.split()[0]
        user.save()
        await bot.send_message(user.user_id, f'üîë –í–∞–º –∏–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ /start')
        text = f'''‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} –Ω–∞ {user.user_role}'''
        await to_main(callback.message, state, callback.from_user, text)
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞', show_alert=True)


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'edit_checklists')
async def edit_checklists(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'edit_checklists':
        text = 'üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞\n‚ÑπÔ∏è –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç - –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –∫–ª–µ—Ä–∫–∞'
        clerks = User.select().where(User.user_role == 'clerk')
        await callback.message.answer(text, reply_markup=edit_checklists_kb(clerks, 'edit_checklists'))
    elif callback.data.split()[1].isdigit():
        clerk = User.get_or_none(User.user_id == int(callback.data.split()[1]))
        if clerk:
            tasks = Task.select().where(Task.user_id == clerk.user_id)
            for i in tasks:
                task_text = f'''üéØ –ó–∞–¥–∞—á–∞: {i.text}
üß≠ –°—Ç–∞—Ç—É—Å: {get_status(i.status)}
{f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: üìÖ {i.date.day}-{i.date.month}-{i.date.year}: üïí {i.date.hour}-{i.date.minute}"
                if i.status == 2 else ""}'''
                await callback.message.answer(task_text, reply_markup=edit_task_kb(i.id))
            text = f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§ {clerk.username}
–í—ã—à–µ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ üéØ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã ‚ûï –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"
–î–ª—è ‚Ü©Ô∏è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"'''
            await callback.message.answer(text,
                                          reply_markup=add_task_and_back('edit_checklists'))
            await state.update_data(dict(selected_clerk=clerk.user_id))
        else:
            await to_main(callback.message, state, callback.from_user, '‚ùå –û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'add_task')  # add and edit task
async def add_task_to_clerk(callback: types.CallbackQuery, state: FSMContext):
    do = '–¥–æ–±–∞–≤–∏—Ç—å'
    if len(callback.data.split()) == 2:
        do = '–∏–∑–º–µ–Ω–∏—Ç—å'
        await state.update_data(dict(task_id=int(callback.data.split()[1])))
    await callback.message.answer(f'‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ {do} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    await state.set_state(Admin.edit_task_for_clerk)


@dp.message_handler(state=Admin.edit_task_for_clerk)
async def edit_task_for_clerk(message: types.Message, state: FSMContext):
    data, text = await state.get_data(), ''
    if 'selected_clerk' in data:
        clerk = User.get_or_none(User.user_id == int(data['selected_clerk']))
        if 'task_id' not in data:
            Task.create(user_id=clerk.user_id, text=message.text, status=1)
            text = f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ üéØ –∑–∞–¥–∞—á—É {message.text} –¥–ª—è üë§ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clerk.username}'
        elif 'task_id' in data:
            task = Task.get_by_id(data['task_id'])
            task.text = message.text
            task.save()
            text = f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ üéØ –∑–∞–¥–∞—á—É –¥–ª—è üë§ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clerk.username} –Ω–∞ {message.text}'
        await bot.send_message(clerk.user_id, 'üìë –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω')
    await to_main(message, state, message.from_user, text if text else '–û—à–∏–±–∫–∞')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'delete_task')
async def delete_task(callback: types.CallbackQuery, state: FSMContext):
    task = Task.get_by_id(int(callback.data.split()[1]))
    await bot.send_message(task.user_id, 'üìë –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω')
    task.delete_instance()
    await to_main(callback.message, state, callback.from_user, 'üóëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–∞–¥–∞—á—É')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'checklist_branch')
async def checklist_branch(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    checklists = ChecklistTemplates.select().where(ChecklistTemplates.is_close == int(callback.data.split()[1])). \
        where(ChecklistTemplates.branch_id == int(data['branch']))
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å '
                                  '–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ - "–î–æ–±–∞–≤–∏—Ç—å"',
                                  reply_markup=checklists_branch_kb(checklists, callback.data.split()[1]))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'add_checklist')
async def add_checklist(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞')
    await state.update_data(dict(is_close=int(callback.data.split()[1])))
    await state.set_state(Admin.add_checklist)


@dp.message_handler(state=Admin.add_checklist)
async def adding_checklist(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ChecklistTemplates.create(name=message.text, is_close=data['is_close'], branch_id=data['branch'])
    await to_main(message, state, message.from_user, f'–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ {message.text}')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'choice_checklist')
async def choice_checklist(callback: types.CallbackQuery, state: FSMContext):
    checklist = ChecklistTemplates.get_by_id(int(callback.data.split()[1]))
    if checklist.photo:
        await callback.message.answer_photo(checklist.photo)
    await callback.message.answer('–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è - –Ω–∞–∂–º–∏—Ç–µ "–ò–∑–º–µ–Ω–∏—Ç—å". –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, '
                                  '–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–£–¥–∞–ª–∏—Ç—å"',
                                  reply_markup=edit_checklist_kb(checklist.id))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'change_checklist')
async def add_checklist(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞')
    await state.update_data(dict(checklist_id=int(callback.data.split()[1])))
    await state.set_state(Admin.change_checklist)


@dp.message_handler(state=Admin.change_checklist)
async def change_checklist(message: types.Message, state: FSMContext):
    data = await state.get_data()
    checklist = ChecklistTemplates.get_by_id(data['checklist_id'])
    await to_main(message, state, message.from_user, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {checklist.name} –Ω–∞ '
                                                     f'{message.text}')
    checklist.name = message.text
    checklist.save()


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'delete_checklist')
async def delete_checklist(callback: types.CallbackQuery, state: FSMContext):
    checklist = ChecklistTemplates.get_by_id(int(callback.data.split()[1]))
    await to_main(callback.message, state, callback.from_user, f'–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ {checklist.name}')
    checklist.delete_instance()


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'photo_checklist')
async def photo_checklist(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞', reply_markup=delete_kb())
    await state.update_data(dict(checklist_id=int(callback.data.split()[1])))
    await state.set_state(Admin.change_photo)


@dp.message_handler(state=Admin.change_photo, content_types=['photo', 'text'])
async def change_photo(message: types.Message, state: FSMContext):
    if message.photo or message.text == '–£–¥–∞–ª–∏—Ç—å':
        data = await state.get_data()
        checklist = ChecklistTemplates.get_by_id(data['checklist_id'])
        checklist.photo = message.photo[-1].file_id if message.text != "–£–¥–∞–ª–∏—Ç—å" else ""
        checklist.save()
        await to_main(message, state, message.from_user, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {checklist.name}')
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞', reply_markup=delete_kb())


@dp.callback_query_handler(lambda callback: callback.data == 'edit_categories')
async def edit_categories(callback: types.CallbackQuery):
    user = User.get_or_none(User.user_id == callback.from_user.id)
    if user and user.user_role == 'admin':
        category = Category.select()
        text = f'''–í—ã–±–µ—Ä–∏—Ç–µ üßæ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
–ß—Ç–æ–±—ã ‚ûï –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é üßæ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"'''
        await callback.message.answer(text,
                                      reply_markup=categories_keyboard(category, 'choice_category', user.user_role))
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞!', show_alert=True)


@dp.callback_query_handler(lambda callback: callback.data == 'edit_category')
async def edit_categories(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'category' in data:
        await callback.message.answer(
            '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è, –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            reply_markup=category_edit_type())
    else:
        text = f'''üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'''
        await state.set_state(Admin.edit_category)
        await callback.message.answer(text)


@dp.callback_query_handler(lambda callback: callback.data == 'change_category_responsible')
async def edit_categories(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'category' in data:
        category = Category.get_by_id(int(data['category']))
        responsible_id = category.responsible
        print(responsible_id)
        if responsible_id is None:
            responsible = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        else:
            responsible = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            for i in User.select().where(User.user_id == int(responsible_id)):
                responsible = f'@{i.username}'
        await callback.message.answer(f'üë§ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{category.name}"</b>\n'
                                      f'–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>"{responsible}"</b>',
                                      reply_markup=edit_checklists_kb(
                                          (User.select().where(User.user_role == 'responsible') + User.select().where(
                                              User.user_role == 'responsible_appeal')),
                                          'set_resp_for_cat'))
    else:
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞! –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è!')


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'set_resp_for_cat')
async def set_responsible_for_category(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'category' in data:
        category = Category.get_by_id(int(data['category']))
        category.responsible = int(callback.data.split()[1])
        category.save()
        user = await bot.get_chat_member(int(callback.data.split()[1]), int(callback.data.split()[1]))
        await bot.send_message(category.responsible,
                               f'‚ÑπÔ∏è –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"{category.name}"</b>')
        await to_main(callback.message, state, callback.from_user,
                      _text=f'‚ÑπÔ∏è –í—ã –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category.name}</b> –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: <b>"{user["user"]["first_name"]}"</b>')

    else:
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞! –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è!')


# category_edit_type
@dp.callback_query_handler(lambda callback: callback.data == 'change_category_name')
async def edit_categories(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'category' in data:
        text = f'''üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'''
    else:
        text = f'''üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'''
    await state.set_state(Admin.edit_category)
    await callback.message.answer(text)


@dp.message_handler(state=Admin.edit_category)
async def add_category(message: types.Message, state: FSMContext):
    data, text = await state.get_data(), ''
    if 'category' in data:
        category = Category.get_by_id(int(data['category']))
        category.name = message.text
        category.save()
        text = f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ üßæ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞: {message.text}'
        await to_main(message, state, message.from_user, text)
    else:
        category = Category.create(name=message.text)
        await state.reset_state(with_data=True)
        text = f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é üßæ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text}\n' \
               f'–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
        data['category'] = category
        await message.answer(text, reply_markup=edit_checklists_kb(
            (User.select().where(User.user_role == 'responsible') + User.select().where(
                User.user_role == 'responsible_appeal')),
            f'set_resp_for_new_cat {category}'))


@dp.callback_query_handler(lambda callback: callback.data.split()[0] == 'set_resp_for_new_cat')
async def set_resp_for_new_cat(callback: types.CallbackQuery, state: FSMContext):
    print(callback.data.split())
    category = Category.get_by_id(callback.data.split()[1])
    category.responsible = int(callback.data.split()[2])
    category.save()
    user = await bot.get_chat_member(int(callback.data.split()[2]), int(callback.data.split()[2]))
    await bot.send_message(category.responsible,
                           f'‚ÑπÔ∏è –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>"{category.name}"</b>')
    await to_main(callback.message, state, callback.from_user,
                  _text=f'‚ÑπÔ∏è –í—ã –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category.name}</b> –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: <b>"{user["user"]["first_name"]}"</b>')


@dp.callback_query_handler(lambda callback: callback.data == 'delete_category')
async def delete_category(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'category' in data:
        category = Category.get_by_id(int(data['category']))
        text = f'üóëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ üßæ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.name}'
        category.delete_instance()
        await to_main(callback.message, state, callback.from_user, text)
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª', show_alert=True)
